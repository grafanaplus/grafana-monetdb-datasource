import angular from 'angular';
import _ from 'lodash';
import * as dateMath from 'app/core/utils/datemath';
import ResponseParser from './response_parser';
import MonetQuery from './monet_query';
import MonetSeries from './monet_series';
import MonetQueryBuilder from './query_builder';

export default class MonetDatasource {
  type: string;
  urls: any;
  username: string;
  password: string;
  name: string;
  database: any;
  basicAuth: any;
  withCredentials: any;
  interval: any;
  supportAnnotations: boolean;
  supportMetrics: boolean;
  responseParser: any;

  /** @ngInject */
  constructor(instanceSettings, private $q, private backendSrv, private templateSrv) {
    this.type = 'monetdb';
    this.urls = _.map(instanceSettings.url.split(','), function (url: string) {
      return url.trim();
    });

    this.username = instanceSettings.username;
    this.password = instanceSettings.password;
    this.name = instanceSettings.name;
    this.database = instanceSettings.database;
    this.basicAuth = instanceSettings.basicAuth;
    this.withCredentials = instanceSettings.withCredentials;
    this.interval = (instanceSettings.jsonData || {}).timeInterval;
    this.supportAnnotations = true;
    this.supportMetrics = true;
    this.responseParser = new ResponseParser();
  }

  query(options) {
    let timeFilter = this.getTimeFilter(options);
    let scopedVars = options.scopedVars;
    let targets = _.cloneDeep(options.targets);
    let queryTargets = [];
    let queryModel;
    let i, y;

    let allQueries = _.map(targets, target => {
      if ((target as any).hide) { return ""; }

      queryTargets.push(target);

      // backward compatability
      scopedVars.interval = scopedVars.__interval;

      queryModel = new MonetQuery(target, this.templateSrv, scopedVars);
      return queryModel.render(true);

    }).reduce((acc, current) => {
      if (current !== "") {
        acc += ";" + current;
      }
      return acc;
    });

    if (allQueries === '') {
      return this.$q.when({ data: [] });
    }

    // add global adhoc filters to timeFilter
    let adhocFilters = this.templateSrv.getAdhocFilters(this.name);
    if (adhocFilters.length > 0) {
      timeFilter += ' AND ' + queryModel.renderAdhocFilters(adhocFilters);
    }

    // replace grafana variables
    scopedVars.timeFilter = { value: timeFilter };

    // replace templated variables
    allQueries = this.templateSrv.replace(allQueries, scopedVars);

    return this._seriesQuery(allQueries, options).then(data => {
      return this.queryResultHandler(data, queryTargets);
    });

    // return this._seriesQuery(allQueries).then((data): any => {
    //   if (!data || !data.results) {
    //     return [];
    //   }

    //   let seriesList = [];

    //   for (i = 0; i < data.results.length; i++) {
    //     let result = data.results[i];
    //     if (!result || !result.series) { continue; }

    //     let target = queryTargets[i];
    //     let alias = target.alias;
    //     if (alias) {
    //       alias = this.templateSrv.replace(target.alias, options.scopedVars);
    //     }

    //     let monetSeries = new MonetSeries({ series: data.results[i].series, alias: alias });

    //     switch (target.resultFormat) {
    //       case 'table': {
    //         seriesList.push(monetSeries.getTable());
    //         break;
    //       }
    //       default: {
    //         let timeSeries = monetSeries.getTimeSeries();
    //         for (y = 0; y < timeSeries.length; y++) {
    //           seriesList.push(timeSeries[y]);
    //         }
    //         break;
    //       }
    //     }
    //   }

    //   return {data: seriesList};
    // });
  };

  queryResultHandler(data, queryTargets) {
    if (!data || !data.results) {
      return [];
    }
    let seriesList = [];

    for (let i in data.results) {
      let result = data.results[i];
      let target = queryTargets[i];
      let monetSeries = new MonetSeries(result.series, target);
      seriesList = seriesList.concat(monetSeries.asGraph());
    }

    // let dummylist = [                              
    //   { "target": "upper_25", "datapoints": [[3.0, 1450754160], [2.0, 1450754220], [1.0, 1450754280], [0.0, 1450754340], [1.0, 1450754400], [1.0, 1450754460], [1.0, 1450754520], [1.0, 1450754580], [1.0, 1450754640], [1.0, 1450754700], [2.0, 1450754760], [1.0, 1450754820], [165.0, 1450754880], [5.0, 1450754940], [1.0, 1450755000], [1.0, 1450755060], [5.0, 1450755120], [2.0, 1450755180], [2.0, 1450755240], [1.0, 1450755300], [1.0, 1450755360], [7.0, 1450755420], [4.0, 1450755480], [1.0, 1450755540], [7.0, 1450755600], [7.0, 1450755660], [1.0, 1450755720], [2.0, 1450755780], [1.0, 1450755840], [1.0, 1450755900], [2.0, 1450755960], [1.0, 1450756020], [1.0, 1450756080], [2.0, 1450756140], [1.0, 1450756200], [7.0, 1450756260], [2.0, 1450756320], [2.0, 1450756380], [1.0, 1450756440], [8.0, 1450756500], [7.0, 1450756560], [1.0, 1450756620], [2.0, 1450756680], [2.0, 1450756740], [2.0, 1450756800], [2.0, 1450756860], [18.0, 1450756920], [1.0, 1450756980], [1.0, 1450757040], [1.0, 1450757100], [1.0, 1450757160], [6.0, 1450757220], [2.0, 1450757280], [1.0, 1450757340], [2.0, 1450757400], [2.0, 1450757460], [1.0, 1450757520], [1.0, 1450757580], [1.0, 1450757640], [1.0, 1450757700], [1.0, 1450757760], [1.0, 1450757820], [15.0, 1450757880], [5.0, 1450757940], [2.0, 1450758000], [1.0, 1450758060], [1.0, 1450758120], [1.0, 1450758180], [1.0, 1450758240], [1.0, 1450758300], [1.0, 1450758360], [1.0, 1450758420], [1.0, 1450758480], [1.0, 1450758540], [1.0, 1450758600], [2.0, 1450758660], [1.0, 1450758720], [2.0, 1450758780], [1.0, 1450758840], [1.0, 1450758900], [1.0, 1450758960], [1.0, 1450759020], [1.0, 1450759080], [1.0, 1450759140], [8.0, 1450759200], [1.0, 1450759260], [2.0, 1450759320], [1.0, 1450759380], [1.0, 1450759440], [1.0, 1450759500], [2.0, 1450759560], [2.0, 1450759620], [1.0, 1450759680], [1.0, 1450759740], [2.0, 1450759800], [1.0, 1450759860], [1.0, 1450759920], [1.0, 1450759980], [1.0, 1450760040], [2.0, 1450760100], [9.0, 1450760160], [1.0, 1450760220], [2.0, 1450760280], [1.0, 1450760340], [0.0, 1450760400], [1.0, 1450760460], [1.0, 1450760520], [1.0, 1450760580], [2.0, 1450760640], [1.0, 1450760700], [2.0, 1450760760], [1.0, 1450760820], [3.0, 1450760880], [3.0, 1450760940], [1.0, 1450761000], [1.0, 1450761060], [1.0, 1450761120], [1.0, 1450761180], [1.0, 1450761240], [1.0, 1450761300], [1.0, 1450761360], [1.0, 1450761420], [1.0, 1450761480], [1.0, 1450761540], [2.0, 1450761600], [1.0, 1450761660], [1.0, 1450761720], [1.0, 1450761780], [1.0, 1450761840], [1.0, 1450761900], [1.0, 1450761960], [2.0, 1450762020], [2.0, 1450762080], [1.0, 1450762140], [2.0, 1450762200], [1.0, 1450762260], [1.0, 1450762320], [8.0, 1450762380], [1.0, 1450762440], [2.0, 1450762500], [1.0, 1450762560], [2.0, 1450762620], [1.0, 1450762680], [1.0, 1450762740], [1.0, 1450762800], [1.0, 1450762860], [1.0, 1450762920], [1.0, 1450762980], [1.0, 1450763040], [1.0, 1450763100], [1.0, 1450763160], [1.0, 1450763220], [1.0, 1450763280], [2.0, 1450763340], [1.0, 1450763400], [1.0, 1450763460], [1.0, 1450763520], [1.0, 1450763580], [2.0, 1450763640], [1.0, 1450763700], [1.0, 1450763760], [2.0, 1450763820], [1.0, 1450763880], [1.0, 1450763940], [1.0, 1450764000], [1.0, 1450764060], [2.0, 1450764120], [2.0, 1450764180], [5.0, 1450764240], [2.0, 1450764300], [1.0, 1450764360], [2.0, 1450764420], [1.0, 1450764480], [2.0, 1450764540], [1.0, 1450764600], [2.0, 1450764660], [1.0, 1450764720], [1.0, 1450764780], [1.0, 1450764840], [2.0, 1450764900], [1.0, 1450764960], [1.0, 1450765020], [1.0, 1450765080], [1.0, 1450765140], [1.0, 1450765200], [1.0, 1450765260], [2.0, 1450765320], [1.0, 1450765380], [1.0, 1450765440], [1.0, 1450765500], [1.0, 1450765560], [1.0, 1450765620], [1.0, 1450765680], [1.0, 1450765740], [1.0, 1450765800], [1.0, 1450765860], [1.0, 1450765920], [1.0, 1450765980], [1.0, 1450766040], [1.0, 1450766100], [3.0, 1450766160], [1.0, 1450766220], [1.0, 1450766280], [18.0, 1450766340], [1.0, 1450766400]] },
    //   { "target": "upper_50", "datapoints": [[130.0, 1450754160], [24.0, 1450754220], [4.0, 1450754280], [1.0, 1450754340], [4.0, 1450754400], [36.0, 1450754460], [30.0, 1450754520], [2.0, 1450754580], [6.0, 1450754640], [186.0, 1450754700], [9.0, 1450754760], [114.0, 1450754820], [288.0, 1450754880], [112.0, 1450754940], [2.0, 1450755000], [5.0, 1450755060], [9.0, 1450755120], [6.0, 1450755180], [149.0, 1450755240], [49.0, 1450755300], [2.0, 1450755360], [238.0, 1450755420], [8.0, 1450755480], [7.0, 1450755540], [267.0, 1450755600], [152.0, 1450755660], [2.0, 1450755720], [18.0, 1450755780], [15.0, 1450755840], [7.0, 1450755900], [3.0, 1450755960], [7.0, 1450756020], [9.0, 1450756080], [219.0, 1450756140], [5.0, 1450756200], [211.0, 1450756260], [6.0, 1450756320], [5.0, 1450756380], [6.0, 1450756440], [49.0, 1450756500], [133.0, 1450756560], [13.0, 1450756620], [8.0, 1450756680], [4.0, 1450756740], [19.0, 1450756800], [137.0, 1450756860], [98.0, 1450756920], [13.0, 1450756980], [282.0, 1450757040], [9.0, 1450757100], [2.0, 1450757160], [83.0, 1450757220], [70.0, 1450757280], [9.0, 1450757340], [76.0, 1450757400], [28.0, 1450757460], [11.0, 1450757520], [33.0, 1450757580], [4.0, 1450757640], [8.0, 1450757700], [6.0, 1450757760], [56.0, 1450757820], [259.0, 1450757880], [370.0, 1450757940], [2.0, 1450758000], [306.0, 1450758060], [45.0, 1450758120], [3.0, 1450758180], [5.0, 1450758240], [1.0, 1450758300], [13.0, 1450758360], [1.0, 1450758420], [55.0, 1450758480], [6.0, 1450758540], [2.0, 1450758600], [90.0, 1450758660], [3.0, 1450758720], [14.0, 1450758780], [15.0, 1450758840], [3.0, 1450758900], [7.0, 1450758960], [6.0, 1450759020], [7.0, 1450759080], [2.0, 1450759140], [43.0, 1450759200], [2.0, 1450759260], [61.0, 1450759320], [20.0, 1450759380], [12.0, 1450759440], [84.0, 1450759500], [49.0, 1450759560], [47.0, 1450759620], [112.0, 1450759680], [40.0, 1450759740], [214.0, 1450759800], [6.0, 1450759860], [2.0, 1450759920], [6.0, 1450759980], [11.0, 1450760040], [106.0, 1450760100], [450.0, 1450760160], [5.0, 1450760220], [7.0, 1450760280], [32.0, 1450760340], [293.0, 1450760400], [8.0, 1450760460], [58.0, 1450760520], [13.0, 1450760580], [86.0, 1450760640], [11.0, 1450760700], [77.0, 1450760760], [21.0, 1450760820], [32.0, 1450760880], [53.0, 1450760940], [11.0, 1450761000], [14.0, 1450761060], [10.0, 1450761120], [5.0, 1450761180], [21.0, 1450761240], [9.0, 1450761300], [245.0, 1450761360], [27.0, 1450761420], [62.0, 1450761480], [8.0, 1450761540], [21.0, 1450761600], [53.0, 1450761660], [13.0, 1450761720], [3.0, 1450761780], [14.0, 1450761840], [9.0, 1450761900], [5.0, 1450761960], [156.0, 1450762020], [9.0, 1450762080], [6.0, 1450762140], [8.0, 1450762200], [24.0, 1450762260], [3.0, 1450762320], [356.0, 1450762380], [42.0, 1450762440], [79.0, 1450762500], [8.0, 1450762560], [211.0, 1450762620], [6.0, 1450762680], [3.0, 1450762740], [3.0, 1450762800], [20.0, 1450762860], [3.0, 1450762920], [2.0, 1450762980], [4.0, 1450763040], [7.0, 1450763100], [7.0, 1450763160], [34.0, 1450763220], [8.0, 1450763280], [14.0, 1450763340], [7.0, 1450763400], [4.0, 1450763460], [14.0, 1450763520], [74.0, 1450763580], [251.0, 1450763640], [5.0, 1450763700], [91.0, 1450763760], [30.0, 1450763820], [28.0, 1450763880], [6.0, 1450763940], [79.0, 1450764000], [17.0, 1450764060], [174.0, 1450764120], [189.0, 1450764180], [120.0, 1450764240], [184.0, 1450764300], [188.0, 1450764360], [250.0, 1450764420], [3.0, 1450764480], [87.0, 1450764540], [17.0, 1450764600], [244.0, 1450764660], [65.0, 1450764720], [8.0, 1450764780], [56.0, 1450764840], [25.0, 1450764900], [5.0, 1450764960], [57.0, 1450765020], [16.0, 1450765080], [38.0, 1450765140], [13.0, 1450765200], [28.0, 1450765260], [91.0, 1450765320], [95.0, 1450765380], [8.0, 1450765440], [61.0, 1450765500], [11.0, 1450765560], [19.0, 1450765620], [5.0, 1450765680], [102.0, 1450765740], [82.0, 1450765800], [133.0, 1450765860], [178.0, 1450765920], [46.0, 1450765980], [68.0, 1450766040], [8.0, 1450766100], [200.0, 1450766160], [128.0, 1450766220], [222.0, 1450766280], [334.0, 1450766340], [153.0, 1450766400]] },
    //   { "target": "upper_95", "datapoints": [[861.0, 1450754160], [767.0, 1450754220], [809.0, 1450754280], [907.0, 1450754340], [624.0, 1450754400], [2445.0, 1450754460], [3134.0, 1450754520], [611.0, 1450754580], [505.0, 1450754640], [646.0, 1450754700], [1441.0, 1450754760], [1246.0, 1450754820], [666.0, 1450754880], [813.0, 1450754940], [1654.0, 1450755000], [785.0, 1450755060], [309.0, 1450755120], [1570.0, 1450755180], [1042.0, 1450755240], [1574.0, 1450755300], [1001.0, 1450755360], [729.0, 1450755420], [2447.0, 1450755480], [1596.0, 1450755540], [883.0, 1450755600], [731.0, 1450755660], [1173.0, 1450755720], [1255.0, 1450755780], [716.0, 1450755840], [635.0, 1450755900], [931.0, 1450755960], [558.0, 1450756020], [1614.0, 1450756080], [1881.0, 1450756140], [435.0, 1450756200], [1798.0, 1450756260], [1493.0, 1450756320], [2108.0, 1450756380], [297.0, 1450756440], [702.0, 1450756500], [1216.0, 1450756560], [1666.0, 1450756620], [536.0, 1450756680], [893.0, 1450756740], [916.0, 1450756800], [473.0, 1450756860], [1555.0, 1450756920], [331.0, 1450756980], [1644.0, 1450757040], [556.0, 1450757100], [358.0, 1450757160], [821.0, 1450757220], [1325.0, 1450757280], [1052.0, 1450757340], [974.0, 1450757400], [816.0, 1450757460], [1062.0, 1450757520], [1438.0, 1450757580], [3759.0, 1450757640], [1479.0, 1450757700], [2117.0, 1450757760], [2878.0, 1450757820], [3627.0, 1450757880], [2101.0, 1450757940], [931.0, 1450758000], [1593.0, 1450758060], [487.0, 1450758120], [2282.0, 1450758180], [983.0, 1450758240], [4287.0, 1450758300], [1422.0, 1450758360], [1604.0, 1450758420], [1099.0, 1450758480], [1128.0, 1450758540], [1547.0, 1450758600], [1932.0, 1450758660], [595.0, 1450758720], [708.0, 1450758780], [1481.0, 1450758840], [1107.0, 1450758900], [875.0, 1450758960], [1128.0, 1450759020], [618.0, 1450759080], [1809.0, 1450759140], [2170.0, 1450759200], [831.0, 1450759260], [1898.0, 1450759320], [1556.0, 1450759380], [1388.0, 1450759440], [1864.0, 1450759500], [1220.0, 1450759560], [1351.0, 1450759620], [1612.0, 1450759680], [1089.0, 1450759740], [1364.0, 1450759800], [1397.0, 1450759860], [1194.0, 1450759920], [892.0, 1450759980], [1275.0, 1450760040], [1110.0, 1450760100], [2732.0, 1450760160], [1751.0, 1450760220], [2395.0, 1450760280], [1750.0, 1450760340], [1821.0, 1450760400], [1353.0, 1450760460], [1088.0, 1450760520], [938.0, 1450760580], [1699.0, 1450760640], [1497.0, 1450760700], [1880.0, 1450760760], [599.0, 1450760820], [2319.0, 1450760880], [1114.0, 1450760940], [840.0, 1450761000], [2462.0, 1450761060], [1316.0, 1450761120], [1018.0, 1450761180], [1195.0, 1450761240], [1300.0, 1450761300], [1389.0, 1450761360], [908.0, 1450761420], [2060.0, 1450761480], [1535.0, 1450761540], [1535.0, 1450761600], [2505.0, 1450761660], [920.0, 1450761720], [996.0, 1450761780], [1378.0, 1450761840], [1171.0, 1450761900], [1105.0, 1450761960], [848.0, 1450762020], [798.0, 1450762080], [1338.0, 1450762140], [1307.0, 1450762200], [1317.0, 1450762260], [940.0, 1450762320], [1418.0, 1450762380], [1699.0, 1450762440], [859.0, 1450762500], [1038.0, 1450762560], [1760.0, 1450762620], [676.0, 1450762680], [1501.0, 1450762740], [1521.0, 1450762800], [714.0, 1450762860], [964.0, 1450762920], [1286.0, 1450762980], [609.0, 1450763040], [1363.0, 1450763100], [1610.0, 1450763160], [1097.0, 1450763220], [1571.0, 1450763280], [949.0, 1450763340], [1239.0, 1450763400], [998.0, 1450763460], [808.0, 1450763520], [1158.0, 1450763580], [1683.0, 1450763640], [1195.0, 1450763700], [733.0, 1450763760], [1498.0, 1450763820], [1015.0, 1450763880], [956.0, 1450763940], [2610.0, 1450764000], [1335.0, 1450764060], [2282.0, 1450764120], [1840.0, 1450764180], [1540.0, 1450764240], [1371.0, 1450764300], [1553.0, 1450764360], [1722.0, 1450764420], [1031.0, 1450764480], [1850.0, 1450764540], [1590.0, 1450764600], [1264.0, 1450764660], [1828.0, 1450764720], [2048.0, 1450764780], [1460.0, 1450764840], [1498.0, 1450764900], [1671.0, 1450764960], [1516.0, 1450765020], [2505.0, 1450765080], [1489.0, 1450765140], [1141.0, 1450765200], [1756.0, 1450765260], [1161.0, 1450765320], [1687.0, 1450765380], [1227.0, 1450765440], [1979.0, 1450765500], [1457.0, 1450765560], [1400.0, 1450765620], [1267.0, 1450765680], [1560.0, 1450765740], [1843.0, 1450765800], [1565.0, 1450765860], [1266.0, 1450765920], [1063.0, 1450765980], [1464.0, 1450766040], [1333.0, 1450766100], [1004.0, 1450766160], [1358.0, 1450766220], [1234.0, 1450766280], [1744.0, 1450766340], [1640.0, 1450766400]] }
    // ]
    
    return { data: seriesList };
  }

  annotationQuery(options) {
    // TODO 
  };


  metricFindQuery(query): Promise<any> {
    let interpolated = this.templateSrv.replace(query, null, 'regex');

    return this._seriesQuery(interpolated)
      .then(_.curry(this.responseParser.parse)(query));
  }

  _seriesQuery(query, options?) {
    if (!query) { return this.$q.when({ results: [] }); }

    return this._monetRequest('GET', '/query', _.extend({ q: query }, options || {}));
  }

  serializeParams(params) {
    if (!params) { return ''; }

    return _.reduce(params, (memo, value: string, key) => {
      if (value === null || value === undefined) { return memo; }
      memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
      return memo;
    }, []).join("&");
  }

  testDatasource() {
    let testQuery = "SELECT name FROM tables where schema_id=(SELECT id as id FROM schemas WHERE name='timetrails')";
    return this.metricFindQuery(testQuery).then(() => {
      return { status: "success", message: "Data source is working", title: "Success" };
    });
  }

  _monetRequest(method, url, data) {
    let self = this;

    let currentUrl = self.urls.shift();
    self.urls.push(currentUrl);

    let params: any = {
      u: self.username,
      p: self.password,
    };

    if (self.database) {
      params.db = self.database;
    }

    if (method === 'GET') {
      _.extend(params, data);
      data = null;
    }

    let options: any = {
      method: method,
      url: currentUrl + url,
      params: params,
      data: data,
      precision: "ms",
      inspect: { type: 'monetdb' },
      paramSerializer: this.serializeParams,
    };

    options.headers = options.headers || {};
    if (this.basicAuth || this.withCredentials) {
      options.withCredentials = true;
    }
    if (self.basicAuth) {
      options.headers.Authorization = self.basicAuth;
    }

    return this.backendSrv.datasourceRequest(options).then(result => {
      return result.data;
    }, function (err) {
      if (err.status !== 0 || err.status >= 300) {
        if (err.data && err.data.error) {
          throw { message: 'MonetDB Error Response: ' + err.data.message, data: err.data, config: err.config };
        } else {
          throw { message: 'MonetDB Error: ' + err.message, data: err.data, config: err.config };
        }
      }
    });
  };

  getTimeFilter(options) {
    let from = this.getMonetTime(options.rangeRaw.from, false);
    let until = this.getMonetTime(options.rangeRaw.to, true);
    if (until === 'now()') {
      return 'time > ' + from;
    }

    return 'time > ' + from + ' and time < ' + until;
  }

  getMonetTime(date, roundUp) {
    // TODO implement Monet specfic time implementation
    if (_.isString(date)) {
      if (date === 'now') {
        return 'now()';
      }

      let parts = /^now-(\d+)([y|m|d|h|m|s])$/.exec(date);
      if (parts) {
        let amount = parseInt(parts[1]);
        let unit = parts[2];
        switch (parts[2]) {
          case 'y': unit = 'year'; break;
          case 'm': unit = 'month'; break;
          case 'd': unit = 'day'; break;
          case 'h': unit = 'hour'; break;
          case 'm': unit = 'minute'; break;
          case 's': unit = 'second'; break;
          default: break;
        }
        return 'now() - interval ' + "'" + amount + "'" + ' ' + unit;
      }
      date = dateMath.parse(date, roundUp);
    }

    return `sys.epoch(${date.valueOf()})`;
  }

}

